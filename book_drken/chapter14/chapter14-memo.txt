
メモや章末問題の回答など。

ベルマン・フォード法：
　・負辺があっても使える。
　・始点から到達可能な負閉路がある場合にはその旨を報告し、
　　そのような負閉路がない場合には各頂点への最短路を求める。
　・計算量はO(|V||E|).
　　各辺に対する緩和がO(|E|)で、O(|V|)回反復する。
　・始点sから到達可能な負閉路がない場合は、反復回数は高々 |V|-1 回となる。
　　よって|V|回目の反復で最短路が更新された場合、負閉路を持つと判断できる。

ダイクストラ法：
　・負辺がない場合に使える。
　・ベルマン・フォード法より高速。
　・計算量はO(|V|^2)またはO(|E|log|V|).
　　前者は単純に実装した場合、後者はヒープを用いる場合。
　・各頂点について求めた最短路で使われる辺の数の合計は、(頂点数)-1 になる、はず。
　　またスタート地点からある頂点への経路は必ず1通り、のはず。
　　(これらはベルマン・フォード法も同様。同じ単一始点最短路問題のため)
　・無向グラフでダイクストラ法を行った結果は、全域木になる。
　　https://oraclesqlpuzzle.ninja-web.net/kyoupro/05-atcoder-02-abc/kyoupro-abc252-e.html

ワーシャルフロイド法：
　・全点対間最短路問題にて使える。
　・計算量はO(|V|^3).
　・ダイクストラ法を全ての頂点を始点として繰り返せば同様に解けるが、
　　こちらは負辺があっても使える。(※)
　　また負閉路を見つけることも可能。
　(※)負辺がある場合は実装に注意が必要。
     出力においてINFの上限判定を緩くするか、DP更新式にてINF判定を追加する。
	 詳細はcode14-5.cppを参照。

ダイクストラ法と最小全域木の違い：
　・前者は「スタート地点」という概念があるのに対し、後者はそれが無い。
　・「どちらも同じ結果が得られるのでは？」という疑問に対しては、以下の反例がある。
　　正三角形ABCとその重心Dを考えたときに、
　　Aをスタート地点としたダイクストラ法では、AB,AC,ADが答になる。
　　一方で最小全域木では、DA,DB,DCが答になる。
　　参考：https://teratail.com/questions/121964

章末14.1：dp-G.cppにて
章末14.2：ABC061-D.cppにて
章末14.3：ABC132-E.cppにて
章末14.4：ARC005-C.cppにて
章末14.5：未挑戦
