
考え方のメモ (いずれレイアウト調整したい)

[ABC210-C][典型90-39]チェックする対象をi個目⇒i+1個目に変えるときにほとんど変化しないならば、差分に着目してO(1)で解く。
[ABC336-E]桁に関する条件を数え上げる⇒桁DPを考えてみる。
[ABC336-E]DPで、ある数値がXで割り切れる⇒Xで割った余りを配列の添え字に使ってみる。 [0]～[X-1]
[ABC336-D][典型90-60]ある1点について着目したい場合、左右それぞれから見ていって、それぞれの結果を合わせてみる。
[ABC314-F]何らかの要素があり(プレイヤー)、要素同士が併合されていくようなとき、葉から根の方向へグラフを構築していくテクニック (2014/1/17)
[ABC207-E]「ある区間[k,i]の和がjで割り切れる」は、累積和の(k-1)番目とi番目をjで割った余りが等しい。 (2014/1/18)
[ABC337-D]グリッドの問題で、各行についてO(W), 各列についてO(H)であれば全体でO(HW)となる。H*Wに関する制約があれば間に合う。 (2024/1/20)
[典型90-01]最小値の最大化、は二分探索が有効であることが多い。
           スコアを増やしていったとき、判定結果が true,true,...,true,false,false,... と1回だけt/fが変化する場合、二分探索を考えてみる。(2024/1/21)
[典型90-02]小さい制約は全探索を考える。 (2024/1/22)
[典型90-02]カッコ列が正しいかの判定は、「'('と')'の数が同じ」「左から見ていって、常に'('の数>=')'の数となっている」 (2024/1/22)
[典型90-03]グラフの直径は最短距離計算を2回やる (2024/1/24)
[典型90-06]辞書順最小は前から貪欲
[ABC195-E]ゲームは後ろから考える (2024/2/1)
[ABC207-C]2つの閉区間の共通部分は、L=max(l1,l2), R=min(r1,r2) として [L,R] と表せる。L<=Rならば共通部分を持つ。 (2024/2/2)
[ABC339-F]ローリングハッシュでWAが数個出た場合、ハッシュ衝突を疑ってみる。(2024/2/3)
[ABC158-E]「ある区間の値がPで割り切れる」は、「右から累積和っぽく見たときに、Pで割った余りが等しい」と読み替えてみる。
          またこの場合、数値を左からではなく右から見た方が処理しやすいかも。 (2024/2/6)
[ABC216-F]集合の最大値は、要素を昇順ソートしておくと扱いやすそう。左から見ていったときに選んだ要素が常に最大値になるため。 (2024/2/8)
[典型90-12]連結判定はUnion-Find (2024/2/9)
[典型90-13]ダイクストラは頂点sからtまでの最短経路を求めるだけでなく、t=1,2,...Nそれぞれにおける最短経路を一気に計算できる。 (2024/2/13)
[典型90-31]Grundy数は、現状態からの遷移先のGrundy数の集合について、そのmexとなる。
           山が複数ある場合は、山ごとのGrundy数のxorを計算し、それが0以外なら勝ち、0なら負け。 (2024/2/21)
[典型90-07]要素をソートしても答に影響しないなら、ソートしてみる。 (2024/2/22)
[典型90-26]木は二部グラフ。 (2024/2/23)
[典型90-87]広義単調減少/増加なグラフのとき、「ちょうどK個」は "K+1以上", "K個以上" で2回二分探索すれば解ける。 (20224/2/23)
[典型90-37]DPをセグメント木で高速化 (2024/2/24)
[ABC342-C]英字は26種であり少ないという考え方。計算量としてもO(N)のままかK=26としてO(NK). (2024/2/24)
[ABC342-E]グラフ問題にて、頂点ごとの答をどの順に確定させていくかを考える。
          本問では「ダイクストラで値が大きい方から確定させていく」という解法だった。
[ABC335-E,ABC341-F,ABC342-E]グラフ問題で各頂点についてスコアのようなものを計算する場合、答をどの頂点から確定させていくかを考える。
[典型90-85]約数の個数は少ない。10^9以下では最大1344個、10^18以下では最大103680個。 (2024/2/28)
[典型90-54]辺の数がN^2になるようなグラフにて、超頂点を使うことで辺数を削減する。(2024/2/29)
[ABC343-E]基本は全探索。
          配置する系の全探索は、ベース位置から正負両方向について探索すること。
          https://twitter.com/e869120/status/1763931692245688445  (2024/3/4)
[典型90-68]クエリ先読み、という考え方。 (2024/3/6)
           a[i]+a[i+1]=X という情報が大量に与えられる場合、pot[i+1]=X-pot[i] を先頭から計算しておき、
           a[i]とa[j]の関係はi,jの偶奇に着目するという考え方。
[典型90-45]部分集合の部分集合はO(3^N).
           dp[S][k]として値を持ち、S=S1∪S2となるS1,S2について dp[S1][k-1], dp[S2][1] で考えてみる。 (2024/3/7)
[典型90-86]bit演算はbitごとに独立に考えられる。 (2024/3/8)
[典型90-83]「複数の方法を考えておき、状況に応じて使い分ける」という考え方 ⇒ その境界を平方分割に繋げる (2024/3/10)
[典型90-80]「全てを満たす場合の数」は難しくとも、「どれも満たさない場合の数」は簡単だったりする。
           そこから包除原理を用いて計算していく。
           4つ以上の包除原理は、集合の数の偶奇によって加算/減算が切り替わる。奇数なら答に加算、偶数なら答に減算など。
           ※問題によって偶奇が逆になったりする。
           N=20はbitDPや包除原理を考えてみる。 (2024/3/12)
[典型90-83]区間スケジューリング問題は「締切りの早い順」に処理する。
           仕事の報酬がどれも同じ場合、貪欲でいける。
           仕事の報酬に差がある場合、DPで処理できる。 (2024/3/13)
[典型90-19]区間の除去・圧縮・合体などが生じるケースでは区間DPを考えてみる。
           このとき、dp[l][r]として半開区間[l,r)で考えると実装しやすそう。 (2024/3/14)
[典型90-74]操作にて数列の値が変わる場合、「必ず1減る」「操作によって変わらない」など不変量に着目する。 (2024/3/15)
[典型90-58]周期性に着目し、ダブリングやループ処理にて解く。 (2024/3/15)
[ABC125-C]左右から累積和、という考え方。 (2024/3/15)
[ABC345-D]再帰で計算量がO(M)のループ内から再帰する場合、べき乗のオーダーになってしまうはず。N回再帰するとO(M^N). (2024/3/16)
[典型90-49]区間[l,r)を反転させる問題は、頂点(l,r)に辺を張る問題に置き換えてみる。 (2024/3/19)
[典型90-09]3つの要素について考える場合、真ん中を固定して考える。
           偏角ソートという考え方。 (2024/3/20)
[典型90-62]入力例に対し、どんな手順で決まっていくかを考えてみる。 (2024/3/20)
[典型90-36]マンハッタン距離は45度回転。
           「N個の点との距離の最大値を求める」場合、最大となりうる点は限定されるケースがある。 (2024/3/21)
[ABC346-D]左右から累積和を取り、各地点について左右を組み合わせる。 (2024/3/23)
[ABC346-E]後の操作で前の操作が上書きされる場合、逆から考えてみる。 (2024/3/23)
[典型90-51]N=40は半分全列挙を考えてみる。 (2024/3/26)
[典型90-63]"変な制約"に着目する。H=8,W=10000なら小さい方についてbit全探索など。 (2024/3/27)
[典型90-63]マンハッタン距離はX,Y独立に考えられるケースがある。
           また全要素との距離の総和は、要素の中央値を基点とした場合に最小値となる。 (2024/3/27)
[典型90-63]全体シフトは愚直にやらず、基点をずらしてO(1)で対応する。 (2024/3/27)
[ABC266-F]N頂点N辺のグラフ(通称：なもりグラフ)は、閉路が1つだけあり、閉路上の頂点を根とする木として見ることができる。 (2024/3/29)
[ABC148-F]グラフ上の移動を考えるゲームは、お互いがどういう行動をするかを考えて法則を探す。 (2024/3/30)
[ABC347-C]円環はデータを2周させて持つ。 (2024/3/30)
[EDPC-L]ゲームのDPにて、2者ともに「自分のスコア-相手のスコア」を最大化したいような問題では、
        dp値を「今の盤面から始めたときの、自分のスコア-相手のスコアの最大値」とすることで、
        「今どちらのターンか」の情報は不要にできる。 (2024/4/2)
[EDPC-M]DP遷移を累積和で高速化するという考え方。区間の和を求める場合に有効。 (2024/4/3)

141-E
ある値xを用いた判定の結果に単調性があれば、二分探索を考えてみる。
xを大きくしていったときに {1,3,3,4,6,8} や {true,true,...,true,false,false,...} など。

ABC324の反省：実装力が足りない C,Eにおける文字列比較が非常に遅い
ABC338の反省：
  Dの考察力が足りない、間違った考察だがそもそも実装に45分かかっており実装力が低い
  一方、Dが解けずとも腐らずにEに取り組んだのは前向きにとらえよう、えらいっ
ABC339の反省：
  DのACまでに33分かかったのはちょい反省か。実装が少し大変だとしても、25分を目標にしたい。
  E問題でセグ木を初めてコンテスト中に解いた。これは成長したと前向きにとらえたいと思う。
  F問題はハッシュ衝突でWAだったが、方針を思いついたのはこれも成長だと思ってよいと思う。
  WAになったとき、ハッシュの衝突に考えが及ぶように精進していきたい。
ABC340の反省：
  A～Dで17分弱。この時点では青パフォに乗っており、良い感じだった。
  実装力が低くEに40分ほど時間がかかったものの、遅延セグ木をコンテストで通せたのはえらい。
  Fが解けなかったが、Throneを解説ACしていたことでとっかかりはつかめた。(後に丁寧に実装しなおしたらACした)
  ABC339でも感じたが、Fや典型90など精進を続けていけば、Fを解けるようになって青パフォを取れるようになる感覚が出てきた。
ABC341の反省：
　A～Eの5完で64分。レート1441でまずまず満足。
　E問題がまたセグ木が想定解法。自分は考えすぎて遅延セグ木でABC322-F(Vacation Query)のように実装して33分かけてしまったが、
　遅延セグ木の関数を作り、かつノーミスでACしたのは成長と取ってよいのではないだろうか。
　またF問題も解き切れなかったものの、方針は正しくコンテスト後20分ほどしてACでき、こちらも成長を感じる。
　先週と同じ感想だが、引き続き精進を続けていけば、Fを解けるようになって青パフォを取れるようになる感覚が出てきた。
ABC342の反省：
　A～Dの4完で43分。レート1299で微減。
　Cは「文字列の種類数は定数(26)」という典型がすぐに出てこなかったのが反省点。
　Dは22分ほどかけてしまったが、ABC254-D(Together Square)を思い出してACできたのは良かったと思う。これムズイて。
　Eが解けなかったのは残念だが実力通りか。「グラフはどの順に値を確定させるべきか」「特殊なダイクストラ」など意識が必要。
ABC343の反省：
　ABCDFの5完で48分。レート1660と過去2番目に高いパフォとなった。
　初めてF問題をコンテスト中に解けたのは嬉しい。DIFF水色中位程度だが、セグ木に工夫した値を持たせる問題を解くことができ、
　セグ木に慣れてきた実感がある。
　E問題は全探索までは思いつけたが、探索範囲や重なる領域について考察がダメだったので、これは実力通りかなと。
ABC344の反省：
　A～Eの5完で56分。レート1484でまずまず満足。
　F問題はupsolveしたものの、このDPは今の実力では思いつけなかった。これは仕方なしかな。
　実質Eまでの早解き回であり、11分短縮するとレート1600であった。
　確かにA,Dの文字列処理、Eの実装など実装力がまだまだではあるが、0WAだったしそこまで神経質になることはないかな、と思う。
ABC345の反省：
　A～Dの4完で90分。レート1463で微増。
　Dは実装方針を見誤って77分+2WAしてしまった。
　一方でたまたま当日にABC322-D(Polyomino)を再解していたことから、方針が見えてからは25分ほどでACできた。
　見誤らなければ青パフォが狙えたという反省と、一方で実装しきれたという成長と、両面があるかなあ。
ABC346の反省：
　A～Eの5完で87分(1WA)。レート1234で13減。
　前回に続き、Dの方針を見誤ってしまった。諦めずにEに行き、1WAしつつも何とかAC.
　またDに戻って考え方を変えたら、解が見えてこちらもAC.
　これ最初に "0010101..." を作れば、O(N)で最初が0での全パターン作れたのか。「前の要素とのdiff」で持つことに執着してしまった。
　※公式解説を見たら、「前後からの処理を合わせる」系が苦手だなと。
　Dでポシャることがまだまだあるんだよなあ。とはいえこれはDをたくさん解く精進しかない気はする。
ABC347の反省：
　A～Eの5完で103分(2WA)。レート1419で微増。
　いやーCが解けず、Dに行くもWAとなり、どうなるかと思った。何とか5完まで行けてほっとした…
　パフォ1600は25分の短縮が必要だったみたい。2WAを削りつつ15分短縮。
　とはいえ、正直なところAB2完で終わってしまう可能性もあった。
　C,Dでつまづいても諦めず、落ち着いてDを解いて続いてDも解いて、最後10分でCに食らいついたのは頑張った。
　my_cheatsheet.cppに書いた以下を実践できた。偉い。
　＞(3)WAとなった場合、WAになるような入力例を何としても作る。
　
[合同式]
割り算の余りのみに着目した等式
aとbをnで割った余りが等しいことを a≡b (mod n) と書く
ab≡ac (mod n) でa,nが互いに素なら両辺をaで割れる(b≡c) 互いに素でないなら、割れない
a≡bならa^k≡b^k
------------
除算について：
ab≡ac (mod n) で g=gcd(a,n) のとき、 b≡c (mod n/g)
つまり法nをn/gで置き換えれば、割っても良い
g=gcd(a,n)=1のとき、「a,nが互いに素なら両辺をaで割って良い」と同じことになる。

一般化すると、g=gcd(a,n)として、
  ab≡ac (mod n)
  ⇒ b≡c (mod n/g)
が除算の公式。

参考：
  https://www.geisya.or.jp/~mwm48961/electro/mod1.htm
  https://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q13182052368
  http://oto-suu.seesaa.net/article/216454231.html
------------
勉強に用いたページ：
  https://manabitimes.jp/math/683
  https://rakustudy.com/modulo-calculation
  http://www.geisya.or.jp/~mwm48961/electro/mod1.htm
