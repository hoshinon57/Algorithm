
考え方のメモ (いずれレイアウト調整したい)

[ABC210-C][典型90-39][ABC333-F][ABC371-E]
          チェックする対象をi個目⇒i+1個目に変えるときにほとんど変化しないならば、差分に着目してO(1)で解く。
[ABC336-E]桁に関する条件を数え上げる⇒桁DPを考えてみる。
[ABC336-E][ABC192-F]
          DPで、ある数値がXで割り切れる⇒Xで割った余りを配列の添え字に使ってみる。 [0]～[X-1]
[ABC336-D][典型90-60]ある1点について着目したい場合、左右それぞれから見ていって、それぞれの結果を合わせてみる。
[ABC314-F]何らかの要素があり(プレイヤー)、要素同士が併合されていくようなとき、葉から根の方向へグラフを構築していくテクニック (2014/1/17)
[ABC207-E][ABC105-D]
          「ある区間[k,i]の和がjで割り切れる」は、累積和の(k-1)番目とi番目をjで割った余りが等しい。 (2014/1/18)
[ABC337-D]グリッドの問題で、各行についてO(W), 各列についてO(H)であれば全体でO(HW)となる。H*Wに関する制約があれば間に合う。 (2024/1/20)
[典型90-01][ABC215-F]
           最小値の最大化、は二分探索が有効であることが多い。
           スコアを増やしていったとき、判定結果が true,true,...,true,false,false,... と1回だけt/fが変化する場合、二分探索を考えてみる。(2024/1/21)
[典型90-02]小さい制約は全探索を考える。 (2024/1/22)
[典型90-02][ABC064-D]
          カッコ列が正しいかの判定は、「'('と')'の数が同じ」「左から見ていって、常に'('の数>=')'の数となっている」 (2024/1/22)
[典型90-03][ABC267-F][AOJ-GRL_5_A]
          木の直径は最短距離計算を2回やる。 (2024/1/24)
          辺が重み付きであっても同様。
[典型90-06]辞書順最小は前から貪欲
[ABC195-E]ゲームは後ろから考える (2024/2/1)
[ABC207-C]2つの閉区間の共通部分は、L=max(l1,l2), R=min(r1,r2) として [L,R] と表せる。L<=Rならば共通部分を持つ。 (2024/2/2)
[ABC339-F]ローリングハッシュでWAが数個出た場合、ハッシュ衝突を疑ってみる。(2024/2/3)
[ABC158-E]「ある区間の値がPで割り切れる」は、「右から累積和っぽく見たときに、Pで割った余りが等しい」と読み替えてみる。
          またこの場合、数値を左からではなく右から見た方が処理しやすいかも。 (2024/2/6)
[ABC216-F][ABC376-E]
          集合の最大値は、要素を昇順ソートしておくと扱いやすそう。左から見ていったときに選んだ要素が常に最大値になるため。 (2024/2/8)
[典型90-12]連結判定はUnion-Find (2024/2/9)
[典型90-13]ダイクストラは頂点sからtまでの最短経路を求めるだけでなく、t=1,2,...Nそれぞれにおける最短経路を一気に計算できる。 (2024/2/13)
[典型90-31]Grundy数は、現状態からの遷移先のGrundy数の集合について、そのmexとなる。
           山が複数ある場合は、山ごとのGrundy数のxorを計算し、それが0以外なら勝ち、0なら負け。 (2024/2/21)
[典型90-07]要素をソートしても答に影響しないなら、ソートしてみる。 (2024/2/22)
[典型90-26]木は二部グラフ。 (2024/2/23)
[典型90-87]広義単調減少/増加なグラフのとき、「ちょうどK個」は "K+1以上", "K個以上" で2回二分探索すれば解ける。 (20224/2/23)
[典型90-37]DPをセグメント木で高速化 (2024/2/24)
[ABC342-C]英字は26種であり少ないという考え方。計算量としてもO(N)のままかK=26としてO(NK). (2024/2/24)
[ABC342-E]グラフ問題にて、頂点ごとの答をどの順に確定させていくかを考える。
          本問では「ダイクストラで値が大きい方から確定させていく」という解法だった。
[ABC335-E,ABC341-F,ABC342-E]グラフ問題で各頂点についてスコアのようなものを計算する場合、答をどの頂点から確定させていくかを考える。
[典型90-85]約数の個数は少ない。10^9以下では最大1344個、10^12以下では最大6720個、10^18以下では最大103680個。 (2024/2/28)
[典型90-54]辺の数がN^2になるようなグラフにて、超頂点を使うことで辺数を削減する。(2024/2/29)
[ABC343-E][ABC031-D]
          基本は全探索。
          配置する系の全探索は、ベース位置から正負両方向について探索すること。
          https://twitter.com/e869120/status/1763931692245688445  (2024/3/4)
          文字列の長さで全探索、という方針 (2025/5/4)
[典型90-68][ABC253-F]
           クエリ先読み、という考え方。 (2024/3/6)
           a[i]+a[i+1]=X という情報が大量に与えられる場合、pot[i+1]=X-pot[i] を先頭から計算しておき、
           a[i]とa[j]の関係はi,jの偶奇に着目するという考え方。
[典型90-45]部分集合の部分集合はO(3^N).
           dp[S][k]として値を持ち、S=S1∪S2となるS1,S2について dp[S1][k-1], dp[S2][1] で考えてみる。 (2024/3/7)
[典型90-86][ABC091-D]
           bit演算はbitごとに独立に考えられる。 (2024/3/8)
           bit演算に加算が絡む場合、そのbitより上のbitには興味がないので、MODを取ってしまう。
           すると特定のbitが1になるような範囲が求まる。 (2025/4/18)
[典型90-83]「複数の方法を考えておき、状況に応じて使い分ける」という考え方 ⇒ その境界を平方分割に繋げる (2024/3/10)
[典型90-80]「全てを満たす場合の数」は難しくとも、「どれも満たさない場合の数」は簡単だったりする。
           そこから包除原理を用いて計算していく。
           4つ以上の包除原理は、集合の数の偶奇によって加算/減算が切り替わる。奇数なら答に加算、偶数なら答に減算など。
           ※問題によって偶奇が逆になったりする。
           N=20はbitDPや包除原理を考えてみる。 (2024/3/12)
[典型90-83]区間スケジューリング問題は「締切りの早い順」に処理する。
           仕事の報酬がどれも同じ場合、貪欲でいける。
           仕事の報酬に差がある場合、DPで処理できる。 (2024/3/13)
[典型90-19][EDPC-N][ABC217-F]
           区間の除去・圧縮・合体などが生じるケースでは区間DPを考えてみる。
           このとき、dp[l][r]として半開区間[l,r)で考えると実装しやすそう。 (2024/3/14)
           計算量がよくO(N^3)となるのは、状態数がN^2, 遷移がO(N)のため。
           DP遷移は「区切りを全探索」「前半と後半に分けるケースと、両端と真ん中に分けるケースを合算」
           「2つ取り除くにあたり、左端を固定してもう1つを全探索」などいろいろある。
[典型90-74][ABC288-D][ABC022-D]
           操作にて数列の値が変わる場合、「必ず1減る」「操作によって変わらない」など不変量に着目する。 (2024/3/15)
           操作にて座標が変わる場合、「操作によって変わらない」不変量に着目する。 重心など。(2025/4/20)
[典型90-58]周期性に着目し、ダブリングやループ処理にて解く。 (2024/3/15)
[ABC125-C]左右から累積和、という考え方。 (2024/3/15)
[ABC345-D]再帰で計算量がO(M)のループ内から再帰する場合、べき乗のオーダーになってしまうはず。N回再帰するとO(M^N). (2024/3/16)
[典型90-49]区間[l,r)を反転させる問題は、頂点(l,r)に辺を張る問題に置き換えてみる。 (2024/3/19)
[典型90-09][ABC375-D]
           3つの要素について考える場合、真ん中を固定して考える。
           偏角ソートという考え方。 (2024/3/20)
[典型90-62]入力例に対し、どんな手順で決まっていくかを考えてみる。 (2024/3/20)
[典型90-36][ABC018-C]
           マンハッタン距離は45度回転。
           (x,y)を(X=x+y,Y=x-y)と変換すると、(x1,y1)と(x2,y2)のマンハッタン距離は max(|X1-X2|, |Y1-Y2|) のチェビシェフ距離にて求められる。
           「N個の点との距離の最大値を求める」場合、最大となりうる点は限定されるケースがある。 (2024/3/21)
[ABC346-D]左右から累積和を取り、各地点について左右を組み合わせる。 (2024/3/23)
[ABC346-E][ABC249-F]
          後の操作で前の操作が上書きされる場合、逆から考えてみる。 (2024/3/23)
[典型90-51]N=40は半分全列挙を考えてみる。 (2024/3/26)
[典型90-63]"変な制約"に着目する。H=8,W=10000なら小さい方についてbit全探索など。 (2024/3/27)
[典型90-63][ABC351-E]
           マンハッタン距離はX,Y独立に考えられるケースがある。
           また全要素との距離の総和は、要素の中央値を基点とした場合に最小値となる。 (2024/3/27)
[典型90-63]全体シフトは愚直にやらず、基点をずらしてO(1)で対応する。 (2024/3/27)
[ABC266-F]N頂点N辺のグラフ(通称：なもりグラフ)は、閉路が1つだけあり、閉路上の頂点を根とする木として見ることができる。 (2024/3/29)
[ABC148-F]グラフ上の移動を考えるゲームは、お互いがどういう行動をするかを考えて法則を探す。 (2024/3/30)
[ABC347-C]円環はデータを2周させて持つ。 (2024/3/30)
          ただし有限回の繰り返しのケースでは上限の存在に注意(ex:ABC300-F)。
[EDPC-L]ゲームのDPにて、2者ともに「自分のスコア-相手のスコア」を最大化したいような問題では、
        dp値を「今の盤面から始めたときの、自分のスコア-相手のスコアの最大値」とすることで、
        「今どちらのターンか」の情報は不要にできる。 (2024/4/2)
[EDPC-M,T][ABC311-F][ABC017-D]
          DP遷移を累積和で高速化するという考え方。区間の和を求める場合に有効。 (2024/4/3)
[ABC348-E]木にて何らかの値を求めるとき、頂点v⇒eへ移動するときの差分に着目する。 (2024/4/6)
[EDPC-Q]DP遷移にて各iごとにdp[i][j]が変化するのが1か所であれば、dp[j]のみでデータを持ち使いまわすという手法。 (2024/4/17)
[ABC350-F]文字列の反転は見る順番や方向を反転してみる。 (2024/4/21)
[EDPC-V]木DPは適当な1頂点を根とするが、全頂点についてそれぞれ根として考える必要がある場合、全方位木を使う(と思う)。
        まずは適当な1頂点を根として木DPを行い、親vから子eへ遷移するとき、eが根となる場合に必要な情報を与えながら移動する。 (2024/4/25)
[ABC351-E]数列Xnの各i,j(i<j)について |Xi-Xj| を計算したいとき、昇順ソートをすれば絶対値を外せる。
          またこのとき、i番目のXiについては 加算回数：i回, 減算回数：(size-i-1)回 となる(主客転倒)。
[ABC351-F]「i<jかつA[i]<A[j]を満たす(i,j)の組についてアレコレ」はセグメント木で計算できることが多い。 (2024/4/28)
[ABC351-D]DFS/BFSにて「今見ている連結成分の番号」を持たせることで、
          複数の連結成分からアクセスされるマスがあっても適切に探索できるテクニック。 (2024/5/1)
[EDPC-X][EDPC-Y][ABC268-F][ABC366-F]
        DPにて要素を使う順番が任意であるときに、実は最適な順序が一意に決まるケースがある、という考え方。 (2024/5/1)
[AB350-F]遅延セグメント木で反転する/しないを管理する際、
         0,1のトグルではなくカウントアップしていき偶数/奇数で処理する方が楽。 (2024/5/2)
[EDPC-Y]求めるものの余事象で考えてみる。
        「最初/最後に***したもの」をDPに持たせてみる。 (2024/5/3)
[ABC041-D]トポロジカルソートの数え上げはbitDPで解ける。 (2024/5/3)
[ABC040-D][ABC375-F]
          グラフにて辺を削除したり、連結を切ったりするのは難しい。逆方向に見て辺の追加や連結追加になるようにする。 (2024/5/5)
[ABC276-F][ABC351-F]セグメント木を2本持ち、1つ目は要素xである値の個数、
          2つ目は要素xである値の個数*x (つまりxでまとめたときの総和)、を管理する。 (2024/5/10)
[ABC354-C]2要素の大小関係を考えるとき、2次元平面で考えるとイメージしやすい。
          大小関係の条件が2つあるときは、片方でソートすると上手くいくことがある。(片方の条件を常に満たせるようになる) (2024/5/18)
[ABC354-F]LISにて、a[i]がdp[idx]に当てはまる場合、LISにa[i]を使うならばLISのidx個目である。 (2024/5/18)
[ABC174-F]区間クエリは区間の右端でソートするとうまくいくことが多い。
          「重複を除いて数える」は、うまく一意に数えられるようにする。 (2024/5/20)
[ABC245-F]強連結成分分解(SCC)にて得たグループをグラフ化したものは、DAGとなる。 (2024/5/23)
[ABC298-F][ABC331-E]
          X,Y2要素の組み合わせについて最大値を求めたい場合、
          Xについて全探索し、Yについては大きい方から選んでいくのを優先度付きキューにて求めるという考え方。
          N回目までには必ず最大値が登場する、といったケースにて有効。 (2024/5/28)
[ABC171-F]Sを部分列に持つ文字列を考えるときは、前や後ろから貪欲に「Sの文字列であった」とすると
          うまく1体1対応が作れることがある。 (2024/5/29)
[ABC291-F]グラフにて辺i->jが常にi<j, つまり戻る方向の移動ができない場合、DPでdistを求めることができる。
[ABC257-F][ABC291-F]
          スタートとゴールの両端からBFS(ダイクストラ)し、それを組み合わせるという考え方。 (2024/5/31)
[ABC356-E]二重シグマはN*Nの表をイメージし、どのセルが対象 or 対象外かをイメージする。 (2024/6/1)
[ABC105-D]区間[l,r]に関する問題は、rについて全探索し、条件を満たすlを高速に数え上げる。 (2024/6/5)
[ABC357-F]自作の遅延セグメント木にて、fpを使わず要素自体に区間長を持たせるという考え方。 (2024/6/9)
[ABC126-F]0～(2^M)-1までの各値をxorした結果は0. (2024/6/10)
[ABC325-F][ABC375-E]
          DPの状態数（次元数）を減らせないか？と考えてみる。
          DP値が「できるorできない」のbool値だった場合、状態数を1つ減らし、減らした状態数をDP値に使えないか考えてみる。(2024/6/14)
[ABC247-F][ABC229-F]
          DPにて円環があり計算しづらい場合は、最初の要素を選ぶ/選ばないで場合分けをする。(2024/6/15)
[ABC358-E][ABC234-F]
          文字を追加していくような問題にて、重複を防ぐために「重複が発生しないような構築手順」を考えてみる。
          同じ文字はある1つのタイミングでのみ追加することを考えると、
          DPに「x種類目の文字までを使い」といった形で持たせてみる。(2024/6/16)
[ABC358-G]X回だけ自由に動いた後のスコアの最大値は、頂点数(マス数)をNとしてBFSっぽいDPでO(NX)で解ける。 (2024/6/17)
[ABC283-F]絶対値は大小関係を固定して外す。 (2024/6/18)
[ABC218-F]クエリごとにある辺や頂点が使えない ⇒ クエリの大半は答を使い回しできないか？ (2024/6/18)
[ABC324-F][ABC034-D][ABC294-F]
          平均値の最大化は答で二分探索を考える。他にも濃度など「分子、分母の2要素が相互に影響するもの」も同様。
          ⇒(ΣA/ΣB)を最大化するような問題にて、ΣAとΣBを独立に考える方針だと
            2/3と2000/3000とでどちらが有利かは後々の値によって変わるので、やりづらい。 (2024/6/21)
[ABC294-F]大きい方からK番目の値を求める場合、二分探索を考えてみる。
          「ある値xより大きい要素がK個以上あるか？」という判定問題となる。
[ABC162-F]DPの状態数が多いときに、「このマスには遷移しない」を用いて探索範囲を狭めるという考え方。 (2024/6/28)
[ABC304-F][ABC361-F]
          約数について何か行うとき、小さい(大きい)方から計算していき、その倍数にて減算することでダブリを除外するという考え方。 (2024/6/29)
[ABC360-E]確率DPにて、場合の数を使って遷移式を求めるという考え方。 (2024/6/30)
[ABC154-F]二項係数は表をイメージし、「どことどこが一致するか」「どの区間の和がどこと一致するか」などを考えてみる。 (2024/7/2)
[ABC232-F]順列を全探索すれば解ける問題にて、計算量を削減したいときにbitDPが使える。 (2024/7/3)
[ABC296-F]要素の交換は転倒数を考えてみる。要素を交換(※)すると、転倒数の偶奇が切り替わる。
          (※)隣り合う2要素でなくても良い (2024/7/4)
[ABC188-F][AGC044-A]操作を逆から考えることで、状態遷移を減らす。 (2024/7/7)
[ABC362-E]DPは結局のところ「直近で必要な要素のみを保持し、不要な古い要素は忘れる」という考え方。 (2024/7/15)
[ABC169-E][ABC362-C]複数要素の組み合わせにて、最小値と最大値の間は全て作れることがある。 (2024/7/15)
[ABC260-F]「条件を満たすものが2つ見つかればよい」「任意の2つでよい」といった場合、鳩の巣原理を考えてみる。 (2024/7/17)
[ABC197-F][ABC363-F][ABC394-E]
          回文は前後から見るとうまく行くケースがある。 (2024/7/24)
          もしくは、中央から両端に伸ばしていくケースもある。 (2025/2/26)
[ABC364-D]k番目の要素を答える、は「条件xのときにk個以上か？」の二分探索を考えてみる。 (2024/7/24)
[ABC364-E]DPにてdp[i][j]のi,jといったキーが大きくdp値が小さいような場合に、キーと値の入れ替えテクにて解けることがある。 (2024/7/27)
[ABC173-F]木や森の問題のように閉路(サイクル)が存在しない場合、(頂点数) - (辺数) = (連結成分数) が成り立つ。
          辺を繋ぐごとに連結成分数が減っていくイメージ。 (2024/7/29)
[ABC244-F]最短距離はDFSではなくBFS. (2024/7/29)
[ABC348-F]bitset高速化という手法。「条件を満たす個数が偶数/奇数である」「要素間で条件を満たす数を求める」
          といった問題に使えるかも、と覚えておく。 (2024/7/30)
[ABC366-E]独立の要素を組み合わせる場合、ソートすることで処理が簡易になることがある。二分探索や尺取り法など。 (2024/8/14)
[ABC367-F]集合の一致判定はZobrist Hashを考えてみる。 (2024/8/18)
[ABC310-F]確率DPにて各要素を使う/使わないを選べるとき、作れる値(総和)の集合で考えてみる。 (2024/8/19)
[ABC297-F]期待値は「全ての事象に対する答の総和 ÷ 事象の場合の数」で求められる。 (2024/8/20)
[ABC282-F]何らか値をたくさん作り(本問では区間[l,r])、後でそれを使うときに「何番目に作った値か？」の情報が必要なとき、
          値の作成時に逆引きを用意しておくと処理が楽。(mapなり単なる配列なり) (2024/8/22)
[ABC281-F]再帰の段数が最大でMで、要素の値は再帰全体で1回(定数回)しか操作しないとき、計算量はO(NM)で抑えられる。 (2024/8/23)
[ABC281-F]最小/最大の数値を構築したい場合、上位の桁から並べたときに辞書順最小(最大)を求めることになる。
          よって上位の桁から貪欲に決めていくことを考えてみる。 (2024/8/23)
[ABC369-F]経路復元にて、最後の地点的な要素はきっと簡単に分かるので、そこから手前に戻る方針を考える。
          pre[idx]といった形で、使った要素の手前をたどれるようにする手法を覚えておく。
[ABC239-F][ABC108-D]
          構築問題は「どのように構築していくか」「どのようにNG判定ができるか」を考えてみる。
          2のべき乗がポイントになる問題では端数をどう考えるか。端数は L-2^r になるので、これをまたbitごとに考えてみる。
[ABC370-E]DP遷移を連想配列を使って高速化。全体から不要なものを除外するなど。 (2024/9/8)
[ABC214-F]文字列に関する数え上げで、どうすれば重複が発生しない数え方になるかを考える。
          逆に「ある特定の文字列を作りたい」ときに、先頭から貪欲に選んでいけば重複なく数えられる。
          これを実現するにはdp[i]を「i文字目を選ぶ」という条件にすればよい。 (2024/9/11)
[ABC259-F]木DPで辺やコストの採用数に制限があるような場合、
          「自身の子だけで使い切る(自身の親とは繋げない)」ケースと「自身の親と繋げる余地を残す」ケースで分けてみる。 (2024/9/20)
[ABC371-C]グラフG,Hが同型ということは、Hの頂点番号を組み替えるとGと一致する、ということ。
          順列全探索で組み替え方を全探索してみる。 (2024/9/20)
[ABC372-D]各iについて考えたときに、見るべき要素が単調増加(減少)になっていて、iをずらしていく場合、
          stackを用いた「ヒストグラム中の最大正方形問題」を考えてみる。
          もしくは、「その時点までの単調」を管理するのにstackを用いる、という考え方。 (2024/9/25)
[ABC371-E][ABC058-D]
          「和の形の数え上げ」や二重シグマ(Σ)などは、主客転倒を考えてみる。
          ただし二重シグマは各iごとの差分をO(1)で求めていく手法もあるので、こちらも忘れずに。 (2024/9/27)
[ABC374-E][ARC174-B]コスパの異なる2要素を組み合わせるとき、可換に着目して探索範囲を制限できるという考え方。
          (コスパの良し悪しがあるならば、コスパ悪い方は使う数の上限が限られる) (2024/10/6)
[ABC374-E]三分探索自体が嘘解法であっても、"三分探索＋周辺探索"でACできることがある。
          嘘解法だったりするので、「最後の手段」とか「三分探索が想定解だが、求めた値が不安」でのテクニックとして覚えておく。 (2024/10/6)
[ABC222-F]木の直径の頂点を(s,t)とすると、頂点xから最も遠い点はs or t. (2024/10/7)
[ABC365-E]a[i]^a[i+1]^a[i+2]^...^a[j] は累積xorを考えてみる。
          また2種の値があり、異なる値どうしをペアにする組み合わせの数は、 (種Aの個数)*(種Bの個数) となる。 (2024/10/11)
[ABC375-C]1-indexedにて、iとN+1-iは中央を境に対象の位置となる(反転)。また(y,x)を90度時計回りすると(x,N+1-y)となる(回転)。
          ※0-indexedの場合、+1が-1になる。
[AOJ-GRL-5-B]木で各頂点から最も遠い点は直径を考えてみる。 (2024/10/18)
[ABC368-C]周期性に着目し、余りの部分だけシミュレーションするという考え方。周期の部分はO(1)で計算。 (2024/10/18)
[ABC368-D][ABC378-F]
          グラフの辺や頂点をルールに基づいて削除した結果を考えるとき、
          入力に対して答となるグラフはどういう形になっているか？ をぐっとにらんで特徴をとらえる。 (2024/10/18)
[ABC377-E][ABC367-E]
          i番目の値をPiで置き換える操作は、 i->Pi という辺を張るグラフで考えてみる。 (2024/10/28)
[ABC287-E]Trie木とローリングハッシュは似ている…というか、Trie木で解ける問題はローリングハッシュで解けるケースが多そう。 (2024/11/1)
[ABC378-E]区間の和は累積和で考える。
          二重シグマにてrを固定(rを伸ばしていく)方針も考えてみる。
          Mで割った余りは、「足してM以上になったらMを引く」と同じ。
[ABC378-F]木で2頂点x,yのパスを考えるとき、LCA(x,y)を必ず通る。木DPにて各頂点がLCAになるケースを数え上げていく、
          という手法を考えてみる。ただし別解法の方が簡単なケースもありそうなので、その点は注意。 (2024/11/3)
[ABC381-E]クエリ問題でクエリ先読みが使えそうにない場合、（当たり前だが）クエリごとの処理になる。
          愚直にやるとO(NQ)で間に合わない場合、logをつけることを考える。
          二分探索とかセグメント木とか。
[ABC381-E]二分探索を行った後にL側,R側それぞれで再チェックして最適解を求める場合、
          L,Rの初期値を判定関数に入れても大丈夫なよう、合法な値にしておくと良いかも。 (2024/11/23)
[ABC381-D]2個ずつ取っていく尺取りで、始点を偶数と奇数で2回やるという手法。 (2024/11/25)
[EDPC-R]要素数Nが50など小さい、操作回数Kは10^9～10^18のように大きい、かつ遷移に「k回目の操作」というkが無関係ならば、
        行列累乗を考えてみる。 (2024/11/29)
[ABC383-D][ABC114-D]
          ある値Nを N=a1^p1*a2^p2*...*ai^pi と素因数分解できたとき、Nの約数の個数は (a1+1)(a2+1)...(ai+1) (2024/12/8)
[ABC383-E]一見、具体的な頂点番号を保持する必要がありそうでも、実は頂点数を保持すれば十分、というケースがある。 (2024/12/10)
[ABC384-F]「2で割れるだけ割る」は2^kごとに考えてみる。 (2024/12/15)
[ABC385-E]グラフの問題にて、辺ごとに定数回しか操作しないのであれば、全体でO(N)に抑えられるという考え方。 (2024/12/22)
[ABC296-E]Functional Graphにおいて、サイクル上にある頂点は入次数を0のものから順に消していくことで求められる。
          Functional Graphでない、次数が2以上のグラフの場合は…強連結成分分解(SCC)かな？ と思われる。 (2024/12/27)
[ABC386-E]「K個選ぶ」は「選ばない(N-K)について考えて、同じ結果を出す」という考え方。 
          TLEとなるのがごく一部のケースならば、どういった入力のときに時間がかかるのかを試行錯誤する。 (2024/12/28)
[ABC386-D]入力に対してマスを塗るといった操作を行うとき、塗り方にどのような規則性があるかを考える。 (2024/12/29)
[ABC280-D]n!を素数pで何回割れるか？はルジャンドルの定理で求められる。
          n/p+n/(p^2)+n/(p^3)+... より。ABC280-D-2.cppを参照。 (2024/12/29)
[典型90-17]複数の[L,R]について処理するとき、例えばRについて昇順ソートしておくことで、
          先頭から見ていったときにRについては考慮から外せるという考え方。
          ※Rが同じときにLの昇順/降順どちらにするかは、正しくカウントできるのはどちら？を考える。 (2025/1/2)
[精選100-8](|x-a1|+|x-a2|+...+|x-an|)が最小値となるxは、a1～anの中央値。 (2025/1/3)
[ABC388-D]区間に対しての加算はいもす法を考えてみる。(他に遅延セグメント木やBITもあるが)
          操作を「自分が、他の人からもらう」から「自分が、他の人にあげる」に置き換えてみる。 (2025/1/12)
[ABC388-E]「貪欲法は証明しよう！」が鉄則。難しくとも、せめて複数ケースで観察して仮説を立てたり、反例を探すべし。
          先頭から貪欲にマッチング、の場合は「今ここでマッチングさせて、あとで困らないか？」を考える。 (2025/1/12)
[ABC387-F]SCCにてサイクルを1つの頂点にまとめる。
[ABC387-F]実装テクニックとして、木上のDPにて子の情報を使いたい場合に、まず子へ再帰して子のDP値を確定させ、
          親(呼び出し元)にて子のDP値を参照するという実装方法。これなら再帰関数で戻り値の設定は不要。 (2025/1/15)
[ABC389-E]個数で二分探索ではなく、「x円以下を全て買ったときに条件を満たすか？」で二分探索する手法。 (2025/1/21)
[ABC390-D][ABC310-D]
          N個の要素をグループ分けする通り数はベル数と呼ぶ(N=12で4*10^6ほど)。
          DFSにて「既存のグループに追加」「新しいグループを作ってそこに追加」として全探索可能。
[ABC390-F]操作(l,r)にてlを固定し、それが答にどれぐらい寄与するかを計算する、という主客転倒。 (2025/1/29)
[ABC086-D]ループする盤面の場合、1ループ分ないし2ループ分で考えてみる。 (2025/2/27)
[ABC095-D]累積和のMAX, 累積MAXという考え方。 (2025/3/11)
[ABC118-D]DPに保持する値は求める答そのものではない、そこからDP復元等で答を構築していく、という考え方。 (2025/3/18)
[ABC121-D]区間[A,B]について何らか計算したい場合、まず[0,X]で計算する処理を実装し、
          [0,A-1]と[0,B]を使って[A,B]を計算するという考え方。 (2025/3/19)
[ABC121-D]偶数nについて n^(n+1)=1. (2025/3/19)
[ABC107-D]中央値は答で二分探索を考えてみる。
          「x以上が過半数あるか」はx以上/未満を+1/-1に割り当て、区間の和が0以上かで判定できる。
          区間の和は累積和で考えてみる。
          区間加算でidxに負の要素があるとき、ゲタをはかせる実装テクニック。 (2025/4/14)
[ABC106-C]"5000兆日後"とか10^10^10とか、たまに出てくる。
          こういうときは操作は「やり切る」というか、「中途半端な状態では終わらない」とか、そういうイメージを持つ。 (2025/4/20)
[ABC059-D]ゲームの問題で負けパターンが推測できた場合、証明の方針は以下。
          「負けパターンの局面からは、どう操作しても非負けパターンになる」
          「非負けパターンの局面からは、負けパターンに遷移できる操作が必ずある」 (2025/5/5)
[ABC048-D]ゲームの問題で、最終形を考えることで解けることがある。 (2025/5/6)

★青レートになりたいなら、F問題に食らいつくこと。
  60分経過時にAC500人なら、最終的に1000人にはなる。レートも200ぐらい下がる。
  EのAC後に順位表を見て気を緩めちゃダメ。一息ついたらFへ行くこと。

141-E
ある値xを用いた判定の結果に単調性があれば、二分探索を考えてみる。
xを大きくしていったときに {1,3,3,4,6,8} や {true,true,...,true,false,false,...} など。

ABC324の反省：実装力が足りない C,Eにおける文字列比較が非常に遅い
ABC338の反省：
  Dの考察力が足りない、間違った考察だがそもそも実装に45分かかっており実装力が低い
  一方、Dが解けずとも腐らずにEに取り組んだのは前向きにとらえよう、えらいっ
ABC339の反省：
  DのACまでに33分かかったのはちょい反省か。実装が少し大変だとしても、25分を目標にしたい。
  E問題でセグ木を初めてコンテスト中に解いた。これは成長したと前向きにとらえたいと思う。
  F問題はハッシュ衝突でWAだったが、方針を思いついたのはこれも成長だと思ってよいと思う。
  WAになったとき、ハッシュの衝突に考えが及ぶように精進していきたい。
ABC340の反省：
  A～Dで17分弱。この時点では青パフォに乗っており、良い感じだった。
  実装力が低くEに40分ほど時間がかかったものの、遅延セグ木をコンテストで通せたのはえらい。
  Fが解けなかったが、Throneを解説ACしていたことでとっかかりはつかめた。(後に丁寧に実装しなおしたらACした)
  ABC339でも感じたが、Fや典型90など精進を続けていけば、Fを解けるようになって青パフォを取れるようになる感覚が出てきた。
ABC341の反省：
　A～Eの5完で64分。レート1441でまずまず満足。
　E問題がまたセグ木が想定解法。自分は考えすぎて遅延セグ木でABC322-F(Vacation Query)のように実装して33分かけてしまったが、
　遅延セグ木の関数を作り、かつノーミスでACしたのは成長と取ってよいのではないだろうか。
　またF問題も解き切れなかったものの、方針は正しくコンテスト後20分ほどしてACでき、こちらも成長を感じる。
　先週と同じ感想だが、引き続き精進を続けていけば、Fを解けるようになって青パフォを取れるようになる感覚が出てきた。
ABC342の反省：
　A～Dの4完で43分。レート1299で微減。
　Cは「文字列の種類数は定数(26)」という典型がすぐに出てこなかったのが反省点。
　Dは22分ほどかけてしまったが、ABC254-D(Together Square)を思い出してACできたのは良かったと思う。これムズイて。
　Eが解けなかったのは残念だが実力通りか。「グラフはどの順に値を確定させるべきか」「特殊なダイクストラ」など意識が必要。
ABC343の反省：
　ABCDFの5完で48分。レート1660と過去2番目に高いパフォとなった。
　初めてF問題をコンテスト中に解けたのは嬉しい。DIFF水色中位程度だが、セグ木に工夫した値を持たせる問題を解くことができ、
　セグ木に慣れてきた実感がある。
　E問題は全探索までは思いつけたが、探索範囲や重なる領域について考察がダメだったので、これは実力通りかなと。
ABC344の反省：
　A～Eの5完で56分。レート1484でまずまず満足。
　F問題はupsolveしたものの、このDPは今の実力では思いつけなかった。これは仕方なしかな。
　実質Eまでの早解き回であり、11分短縮するとレート1600であった。
　確かにA,Dの文字列処理、Eの実装など実装力がまだまだではあるが、0WAだったしそこまで神経質になることはないかな、と思う。
ABC345の反省：
　A～Dの4完で90分。レート1463で微増。
　Dは実装方針を見誤って77分+2WAしてしまった。
　一方でたまたま当日にABC322-D(Polyomino)を再解していたことから、方針が見えてからは25分ほどでACできた。
　見誤らなければ青パフォが狙えたという反省と、一方で実装しきれたという成長と、両面があるかなあ。
ABC346の反省：
　A～Eの5完で87分(1WA)。レート1234で13減。
　前回に続き、Dの方針を見誤ってしまった。諦めずにEに行き、1WAしつつも何とかAC.
　またDに戻って考え方を変えたら、解が見えてこちらもAC.
　これ最初に "0010101..." を作れば、O(N)で最初が0での全パターン作れたのか。「前の要素とのdiff」で持つことに執着してしまった。
　※公式解説を見たら、「前後からの処理を合わせる」系が苦手だなと。
　Dでポシャることがまだまだあるんだよなあ。とはいえこれはDをたくさん解く精進しかない気はする。
ABC347の反省：
　A～Eの5完で103分(2WA)。レート1419で微増。
　いやーCが解けず、Dに行くもWAとなり、どうなるかと思った。何とか5完まで行けてほっとした…
　パフォ1600は25分の短縮が必要だったみたい。2WAを削りつつ15分短縮。
　とはいえ、正直なところAB2完で終わってしまう可能性もあった。
　C,Dでつまづいても諦めず、落ち着いてDを解いて続いてDも解いて、最後10分でCに食らいついたのは頑張った。
　my_cheatsheet.cppに書いた以下を実践できた。偉い。
　＞(3)WAとなった場合、WAになるような入力例を何としても作る。
ABC348の反省：
　A～Dの4完で37分(2WA)。レート1260で減少。
　E問題は典型90の類似問題ですぐ方針が立ったものの、どうしてもWAが取れず。
　コンテスト後、INF64よりも想定解の方が大きかったのが原因だった。
　これINFでハマらなければパフォ1700超えだったのに、本当に悔しい。二度と同じハマりをしないようにしよう。
　Dは実装重めだったが、BFSの重ね技でうまく解けたと思う。
ABC350の反省：
　A～Eの5完で42分(1WA)。レート1474で12増。
　Eが同レート帯で得意な方である確率DPで、ACした時点でパフォ1740だった。
　しかし予想以上にFを解く人が多く、結局水色パフォに。
　Fは遅延セグ木にとらわれて、構文解析の観点で見ることができなかった。
　とはいえ遅延セグ木でも解くことができ、解けなかったのは自分の実力。複数解法で実装して精進しよう。
ABC351の反省：
　ABCDFの5完で69分(1WA)。レート1448で微増。
  D問題の細かい実装方針に時間がかかった。(41分+1WA)
  EよりFの方が解かれているのでFへ、18分でAC.
  立ち回りやセグ木を使うなど満足だが、これ2000人も解くとは… Diffも1253とな。
  Eは「マンハッタン距離は45度回転」は思い浮かんだものの、そこから進められなかった。
  解ければ青パフォだったものの、これが今の実力で、青レートまでの距離かなと。
ABC352の反省：
　A～Eの5完で67分(2WA)。パフォ1214で16減。
　Eまでの早解きセットだったかな。D,Eにそれぞれ23,30分かかり、かつ1WAずつしたことで厳しい結果に。
　パフォ1600には30分短縮＆WA無し。実装力が足りない。
　まあ、自分が不得意な問題セットだったということで切り替えていこう。
ABC353の反省：
　A～Eの5完で74分(1WA)。パフォ1396で微増。
　EはTrie木を未履修だったが、自力でアルゴリズムを検討し、
　TLEになったら苦肉の策でコンパイラ最適化を入れることでAC!
　Trie木の未履修は反省点だが、諦めずに食らいついたのは偉い。
　パフォ1600には5完で28分短縮＆WA無し。これはGを解くことが前提かな、精進していこう。
ABC354の反省：
　A～Eの5完で58分。パフォ1588で24増。
　C,Dに時間が少しかかったが、得意な問題セットだったと思う。
　一方で5完した時点で気が緩み、Fを解けなかったのは大反省。22:45にACという結果に。
　5完した後に順位表を見すぎだった。
　青レートになりたいならFは解かなきゃダメ。60分経過時にAC500人なら、最終的に1000人にはなる。
ABC355の反省：
　A～Dの4完で23分。パフォ1574で20増。
　早解きセットだった。Cの提出前チェックをあと90秒短縮すればパフォ1600ではあった。
　とはいえそこではなくFを解けるようにするのが本質かな。クラスカル法の気持ちの理解を深めよう。
ABC356の反省：
　A～Dの4完で36分。パフォ1354で微減。
　E解きたかった。累積和や調和級数は見えたのに、細かい部分の詰めができなかった。
　5完すればパフォ1600がほぼ確。二重シグマは今後しっかり解けるようにしていこう。
ABC358の反省：
　A～Dの4完で30分(2WA)。パフォ884で-42と大幅減。レート減少量としてはワースト2位タイ、だいぶ凹む。
　Dまで早解きセットだったがDの尺取りでバグり散らかしてしまった。Eも解けず。
　「尺取り法の実装を猛省」「Eの文字列追加は、重複が発生しないような手順を考える＝文字種順に見ていく」といった反省か。
ABC359の反省：
　ABCEの4完で82分(1WA)。パフォ1379で微増。
　CDEいずれも難問できつかった。2完もありえたが、頑張ってEに食らいついたのは良かった。
　DのスライドDPはしっかり解けるようにしておこう。Eのスタック解法も。しかしEを2000人通すか…
ABC360の反省：
　ABCDの4完で31分。パフォ1272で微減。
　Eの確率DPが解けなかったのは大反省。場合の数を用いてDP遷移を考えることも覚えておこう。
ABC361の反省：
　A～Eの5完で98分(1WA)。パフォ1402で微増。D,Eどちらも反省点と自己評価点があった。
　D：計算量に自信が無く、dpを2^Nと空きマス位置の2次元で実装を進めてハマった。mapで文字列を持たせる方針に切り替えたのは評価点だが、
　最初から計算量を見極めてそうすべきだった。
　E：全方位木DPみたいなことをやってハマり、終了2分前にギリギリAC.
　木の直径に気づかなったのは反省点。ただACに食らいついたのは評価点か。
ABC363の反省：
　ABCEの4完で82分(2WA)。パフォ1330で微減。
　Dが解けなかったのは大反省。方針を大いに見誤った。
　冷静に考えることができない回だったなあ。まず愚直に先頭1000個の回文数を出力することすら頭が回らなかった。
ABC364の反省：
　A～Fの6完で96分(1WA)。パフォ1962でレート+77, 歴代最高！ 初めて6完できた。
　5完の時点でパフォ1760＆残り35分で、そこで満足しそうになってしまった。
　ただ「F問題に食らいつくこと」のapproachを思い出して気を抜かなかった。ラスト3分でAC!
　パフォ以上に、初めて6完できたこと、そして最後の最後まで諦めなかったことが嬉しい。
ABC365の反省：
　A～Eの5完で63分。パフォ1353で微減。苦手回だったかな。
　F,Gは難しいのでEまでを何分で解けるかがポイントっぽい。
　青パフォには5完40分が必要なので厳しいが、全体(主にE)で15分ぐらい短縮できるようにしたい。
ABC367の反省：
　A～Eの5完で57分。パフォ1488で微増。
　D,E難しかったがノーペナで解けて良かった。しかしEは10分早くしたかったかな、グラフをイメージするのに時間がかかってしまった。
　Fはハッシュの方針を思いつけたのは成長だが実装しきれず。集合(多重集合も含む)の一致判定ができるZobrist Hashを学んでおこう。
　青パフォには5完の速度を上げてもダメで、6完が必要だった。やはりFをしっかり解けるようにしていこう。
ABC368の反省：
　ABCDFの5完で64分(3WA)。パフォ1373で微減。
　今でもたまにある「C問題でWA出してつまづく」「D問題の解法が思いつかない」が重なった失敗回だった。
ABC369の反省：
　A～Eの5完で62分。パフォ1445で微増。
  Cの尺取りで少々つまづいたものの、大きな失敗は無かった。つまりこれが今の実力か。
  Fはセグ木を使いつつ、復元のために「前のコインの番号を持つことで、末尾から復元できる」という手法をしっかり覚えておこう。
ABC370の反省：
　A～Dの4完で39分(1WA)。パフォ1317で減少。
　Cの読解に苦戦した、Dに1WAしたなどあるが、本質はEが解けなかったこと。
　「以前に出た累積和の位置」だけに思考がかたより、行き詰った後にDPを思いつけなかった。
　「行き詰ったらDPで考える」とか、「反対側の条件を求めて全体から引く」ではなく愚直に計算するなど、思考をリセットできるようにする練習が必要。
ABC371の反省：
　A～Eの5完で63分。パフォ1378で微減。
　Eまでの早解き回だったかな。青パフォにはC,Dを合わせてを27分⇒17分、Eを25分⇒15分で15分短縮する実力が必要か。
　近々、E,Fの青DIFFを埋めたらABC200～の解きなおしをする方針なので、その時は時間を意識していきたい。
ABC372の反省：
　A～Fの6完で93分(1WA)。パフォ1709でレート33, 自身歴代2位のパフォ。
　Eをちょうど60分で解いた後、そこで気を抜かず「F諦めんなよ」案件だった。最後まで粘って良かった。
　Dが遅かったのが反省ポイント。最大正方形アルゴリズムをしっかり勉強しておく。
　また今回初めてChatGPTを活用できた。実行時エラーがありそうな状況で、ソースを投げたらカンペキに指摘してくれた。
　(ルールの範囲内で)しっかりAIも活用していく練習も必要だと実感した。
ABC373の反省：
　A～Dの4完で20分(1WA)。パフォ1282で減少。
　Eのコーナーケースを見つけられず解けなかったのは悔しい。M<=NならM=Nのケースを叩くべきだった。
　水DIFF中位～上位を解ける率をもっと上げていく必要がある。
ABC374の反省：
　A～Dの4完で34分。パフォ1179で減少。3か月ぶりの緑パフォを取ってしまった。
　自分が解けなかった問題が水色中位～上位のケースで、
　それが解ければパフォ1600, 解けなければパフォ1200, といったケースが多いように思う。
　というか過去の結果を見返すと、この辺りのDIFFの打率がだいぶ低い。今のレートが実力以上という自覚が必要。
　早解き練習も必要だが、水～青DIFFの打率を高める、色々な問題に触れて典型を1つでも増やす、
　など精進を愚直に続けていくしかないかな、と思う。
ABC375の反省：
　A～Eの5完で82分(2WA)。パフォ1403で横ばい。
  B,Eに少し時間がかかったが、自レートとほぼ同DIFFのEを解けたのは良かった。
  残り17分だったがFに食らいついたのはえらい。dist更新の考慮漏れでACできなかったのは悔しいが。
  6完なら確定青パフォだったので、引き続き精進していこう。
ABC376の反省：
　A～Eの5完で52分(1WA)。パフォ1522で増加。
　Eまでの早解き回だが、そこそこ食らいつけたと思う。
　Eでset/multisetを使い間違える凡ミスが無ければパフォ1670だったが、他は比較的スムーズだったし実力相当かなと。
　円環のライブラリを作成しよう。
ABC377の反省：
　A～Dの4完で32分。パフォ1327で微減。
  Eは難しかったが今後しっかり解けるようにしておく。GはTrie木をしっかり履修する。
ABC378の反省：
　A～Dの4完で28分。パフォ1133という大失態。
　Bでつまづいたが、本質はE,Fが解けなかったこと。水パフォ中位の問題がコンテスト時に本当に解けない。
ABC379の反省：
　A～Eの5完で72分。パフォ1488で増加。
　Cがペナ祭りの中でノーペナは良かったが、これで実力的に上振れだった感がある。レート1400ぐらいが今の実力か。
　水DIFF中位以降が解けない、という点が変わらず課題。
ABC381の反省：
　A～Dの4完で62分(2WA)。パフォ1131でダメダメ。
　水DIFF中位以降が解けない、という点が変わらず課題。
ABC382の反省：
　A～Eの5完で66分。パフォ1396で横ばい。
　DIFFがE>Fで逆転し、Fを解いた人が多くパフォが伸びなかった。
　Eの期待値DPが解けたのは良かったが、Fが解けなかったのが悔しい。Range AddではなくRange Updateだった。
　WAになるケースをもっと本気で探すべきだったのと、典型90に似たものがあったので、その問題を探してソースコードを見たら気づけたかも。
　そういった貪欲さが足りない。
ABC383の反省：
　ABCDFの5完で92分。パフォ1683で久しぶりに青パフォ、レート増加した。
　Aでacc/oj周りがログアウトされていて躓いた。またDの数学問題に大苦戦したのは反省点。
　ただそこから残り25分で「Eが解けそうにないのでFにくらいつく」ムーブで見事AC! これはえらい。
　1問解けるか解けないかでレートが4,500変わる、というのがここ最近の傾向だが、それが今回は良い方に倒れた。
ABC384の反省：
　A～Eの5完で39分。パフォ1652で青パフォ、レート増加した。
　E/F間に崖があり、自身のレート帯だとEまで早解き回だった。
　D,Eの実装時間に細かい反省はあるが、WAも無く上手くできた方だと思う。
　Fは今の知識では解けないなこれ。しっかり復習しよう。
ABC385の反省：
　A～Dの4完で42分。パフォ1320でレート減少。
　Dまではそこそこ早く解けたが、水DIFF中位のEが解けず、最近多いパターン。
　Eは全方位木DPにとらわれて結局解けなかった。やり方はあるのかもだけど、自分の実装方針では嘘方針っぽかったな。
　とはいえ公式解説の方針が思いつけたかというと怪しい。結局は実力不足か。
ABC386の反省：
　A～Dの4完で40分。パフォ1370でレート微減。
　水DIFF上位のEが解けず、のいつものパターン。Cに時間かかったけど本質はEかな。
　Eの「K個選ぶ」は「選ばない(N-K)について考えて、同じ結果を出す」は自身初めて…の典型かな。身に着けておく。
ABC387の反省：
　A～Dの4完で73分(1WA)。パフォ1413で横ばい。
　皆そうだったが、Cに大苦戦。いったん諦めてDを見て即ACし、Cに戻って何とかこちらもAC.
　最近、桁DPについて考えていたから解けたという考え方と、ちゃんと勉強しておけば30分短縮できたんじゃないか、という反省がある。
　leading-zero含め、桁DPの書き方を練習しておこう。
ABC388の反省：
　A～Dの4完で78分(3WA)。パフォ1177でダメダメ。D,Eの考察に大苦戦した。
　Eの貪欲で嘘解法で進んでしまった。悔しいが、仕切り直して「小さい方N/2個は上に、大きい方N/2個は下に使うという決め打ちで良さそう」
　と思いつけたのはセーフ。
　青パフォは5完38分だったので、WAを削って40分短縮必要。厳しそうだが、Dで15分、Eで15分短縮は必達したい。
ABC389の反省：
　ABCDFの5完で71分。パフォ1760で自身歴代2位のパフォ。
　E,FのAC数を見てFへ。履修を後回しにしてたセグ木の二分探索だったけれど、試行錯誤して何とかACできた。
　ちゃんと履修しておけば10分短縮できたかもだけど、それは次週ちゃんと勉強することにしよう。
　それよりもE問題で「個数ではなく何円まで買い占める」の二分探索が思いつけなかった点は反省。
ABC390の反省：
　ABCEの4完で49分。パフォ1489でレート微増。
　D,EのAC数を見てEへ。Eも難しかったが丁寧にDPしてACできた。これは良いムーブ。
　しかしDの全探索が見えなかったのはNG.グループ分けを再帰で書くのを復習しておく。
ABC391の反省：
　A～Fの6完で87分(1WA)。パフォ1716で自身歴代3のパフォ。
　最初D,Eの実装が思いつかず反省。下手したら3完もありえたが、よく6完できたなと思う。Eまで解いた後、Fに食らいついたのはえらい。
　Eの凡ミスは大反省だが、これでも実力より上振れしてると思う。引き続き精進。
ABC392の反省：
　A～Fの6完で88分。パフォ1572でレート増加。
　Dに苦戦した、Fは「後ろから見る」のは良いがセグ木二分探索を思いつくべきだった、等の反省点があるが、結構上手くいったと思う。
　Dの計算量はすぐ思いつくようにしておきたい。
ABC393の反省：
　A～Fの6完で87分(2WA)。パフォ1500で横ばい。皆レベル高いなあ。
　Eの想定解法が全然思いつかなかったが、高速約数列挙などググって何とかACにこぎつけたのはえらい。Fもすんなり解けた。
　青パフォはペナ込みで17分短縮必要。CのWAやD苦戦がもったいなかったが、「これが今の実力」な回だったと思う。
ABC394の反省：
　A～Dの4完で13分。パフォ1177でダメダメ。
　水DIFF中位～のE,Fが解けず、のパターン。とはいえ皆レベル高いなあ。
ABC395の反省：
　A～Fの6完で98分。パフォ1522で微増。
　Dで大苦戦、50分もかかってしまった。最初UnionFindを使うNG方針で時間を使ってしまい、
　「巣にラベルを貼る」方針を思いつくも実装で頭がこんがらがった。
　とはいえ残り40分からE,F解き切った。特にFにくらいついてラスト2分でACしたのはえらい。これでパフォ250変わったみたい。
　青パフォはここから14分短縮必要。Dに苦戦しなければ十分いけたが、ペナ無しだったしF解けたし、これが実力値な感はある。

[合同式]
割り算の余りのみに着目した等式
aとbをnで割った余りが等しいことを a≡b (mod n) と書く
ab≡ac (mod n) でa,nが互いに素なら両辺をaで割れる(b≡c) 互いに素でないなら、割れない
a≡bならa^k≡b^k
------------
除算について：
ab≡ac (mod n) で g=gcd(a,n) のとき、 b≡c (mod n/g)
つまり法nをn/gで置き換えれば、割っても良い
g=gcd(a,n)=1のとき、「a,nが互いに素なら両辺をaで割って良い」と同じことになる。

一般化すると、g=gcd(a,n)として、
  ab≡ac (mod n)
  ⇒ b≡c (mod n/g)
が除算の公式。

参考：
  https://www.geisya.or.jp/~mwm48961/electro/mod1.htm
  https://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q13182052368
  http://oto-suu.seesaa.net/article/216454231.html
------------
関連する問題：
  ABC186-E
  ABC060-B
------------
勉強に用いたページ：
  https://manabitimes.jp/math/683
  https://rakustudy.com/modulo-calculation
  http://www.geisya.or.jp/~mwm48961/electro/mod1.htm
